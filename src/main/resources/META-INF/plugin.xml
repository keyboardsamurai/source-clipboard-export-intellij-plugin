<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>com.keyboardsamurais.plugin.source-clipboard-export-plugin</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Export Source to Clipboard</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="agudo.projects@icloud.com" url="https://www.antonioagudo.com">Antonio Agudo</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[<description>
    This plugin automates the inclusion of source code and its file path into your clipboard, streamlining the process
    for analysis and sharing, especially with Large Language Models (LLMs).

    Including the file path with the source code often gives immediate context to the recipient or the processing tool.
    This is particularly useful when sharing code snippets with team members or integrating with AI and LLMs,
    as it clarifies where the code comes from within a project's directory structure.
    It helps in understanding the purpose and scope of the code, especially in large projects with complex directory
    hierarchies and results in better LLM response accuracy and performance.

    <ul>
        <li><b>AI-Ready Sharing:</b> Prepare your code for analysis by AI and LLMs with seamless clipboard integration.</li>
        <li><b>Efficient Collaboration:</b> Enhance your workflow by quickly sharing code and its context with team members or AI tools.</li>
        <li><b>Automated Convenience:</b> Automatically append file paths to clipboard content, saving time and reducing manual errors.</li>
        <li><b>Smart Directory Processing:</b> Automatically processes entire directories, converting code files and their paths into a shareable format, while intelligently skipping binary files to focus on relevant source code.</li>
        <li><b>Limit-Conscious Operation:</b> Designed to manage large data loads efficiently, the plugin caps processing at 50 files to maintain performance and prevent overload.</li>
    </ul>

    Export Source to Clipboard is designed for developers and teams looking to leverage AI in their coding process,
    offering a convenient bridge between your code and the latest AI technologies for analysis and improvement.
    It's an essential tool for anyone aiming to enhance productivity and focus on innovation in the software
    development lifecycle.
</description>
]]></description>

    <change-notes><![CDATA[
        <h3>Version 1.7 - New Features & Improvements</h3>
        <ul>
            <li>Token Count improvement: Token count is now based on GPT-4, calculated by the awesome <a href="https://github.com/knuddelsgmbh/jtokkit">Jtokkit library</a></li>
        </ul>
        <h3>Version 1.6</h3>
        <ul>
            <li><b>Gitignore Support:</b> The plugin now respects rules defined in your project's <code>.gitignore</code> files, automatically excluding matching files and directories from the export. The UI shows a count of files excluded by these rules.</li>
            <li><b>Token Count Estimation:</b> Implemented token count estimation for exported code (useful for managing LLM context limits).</li>
            <li><b>Enhanced Configuration Options (Settings/Preferences):</b>
                <ul>
                    <li>Added a setting to configure a maximum file size limit (in KB) for exported files.</li>
                    <li>Added a setting to specify custom paths or patterns (like <code>.git</code>, <code>node_modules</code>) to always ignore during export.</li>
                    <li>Added a setting to toggle the inclusion of file path prefixes in the exported content.</li>
                    <li>Improved the settings UI with better validation and feedback.</li>
                </ul>
            </li>
        </ul>
    ]]></change-notes>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <!-- depends>com.intellij.modules.execution</depends -->
    <depends>com.intellij.java</depends>
    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <projectConfigurable instance="com.keyboardsamurais.intellij.plugin.sourceclipboardexport.config.SourceClipboardExportConfigurable"
                             displayName="Export Source to Clipboard"
                             id="com.keyboardsamurais.intellij.plugin.sourceclipboardexport.config.SourceClipboardExportConfigurable" />
        <notificationGroup id="SourceClipboardExport" displayType="BALLOON" />
    </extensions>

    <actions>
        <action id="SourceClipboardExport.DumpFolderContents"
                class="com.keyboardsamurais.intellij.plugin.sourceclipboardexport.actions.DumpFolderContentsAction"
                text="Export Source to Clipboard"
                description="Export source code and file paths to clipboard">
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
        </action>
        <action id="SourceClipboardExport.ToggleFilters"
                class="com.keyboardsamurais.intellij.plugin.sourceclipboardexport.actions.ToggleFiltersAction"
                text="Toggle Filters"
                description="Toggle file extension filters on/off">
            <add-to-group group-id="ProjectViewPopupMenu" anchor="after" relative-to-action="SourceClipboardExport.DumpFolderContents"/>
        </action>

        <!-- New Action for Folding Stack Traces -->
        <action id="SourceClipboardExport.FoldAndCopyStackTrace"
                class="com.keyboardsamurais.intellij.plugin.sourceclipboardexport.actions.FoldAndCopyStackTraceAction"
                text="Copy Folded Stacktrace to Clipboard"
                description="Folds external library frames in the selected stack trace and copies it.">
            <add-to-group group-id="ConsoleEditorPopupMenu" anchor="last"/>
        </action>

    </actions>

</idea-plugin>
